<start of app_router.dart>
import 'package:flutter/material.dart'; import 'package:net_app/data/models/package_model.dart'; import 'package:net_app/features/auth/screens/login_screen.dart'; import 'package:net_app/features/auth/screens/otp_screen.dart'; import 'package:net_app/features/home/screens/home_screen.dart'; import 'package:net_app/features/notifications/screens/notifications_screen.dart'; import 'package:net_app/features/payment/screens/payment_screen.dart'; import 'package:net_app/features/settings/screens/settings_screen.dart'; import 'package:net_app/features/splash/splash_screen.dart'; import 'package:net_app/features/statistics/screens/user_statistics_screen.dart'; // Added class AppRouter { static const String splashRoute = '/'; static const String loginRoute = '/login'; static const String otpRoute = '/otp'; static const String homeRoute = '/home'; static const String paymentRoute = '/payment'; static const String notificationsRoute = '/notifications'; static const String settingsRoute = '/settings'; static const String statisticsRoute = '/statistics'; // Added static Route<dynamic> generateRoute(RouteSettings settings) { switch (settings.name) { case splashRoute: return MaterialPageRoute(builder: (_) => const SplashScreen()); case loginRoute: return MaterialPageRoute(builder: (_) => const LoginScreen()); case otpRoute: final phoneNumber = settings.arguments as String?; return MaterialPageRoute( builder: (_) => OtpScreen(phoneNumber: phoneNumber), ); case homeRoute: return MaterialPageRoute(builder: (_) => const HomeScreen()); case paymentRoute: final package = settings.arguments as PackageModel; return MaterialPageRoute( builder: (_) => PaymentScreen(package: package), ); case notificationsRoute: return MaterialPageRoute(builder: (_) => const NotificationsScreen()); case settingsRoute: return MaterialPageRoute(builder: (_) => const SettingsScreen()); case statisticsRoute: // Added return MaterialPageRoute(builder: (_) => const UserStatisticsScreen()); default: return MaterialPageRoute( builder: (_) => Scaffold( body: Center( child: Text('No route defined for ${settings.name}'), ), ), ); } } }
<end of app_router.dart>

<start of core/theme/app_theme.dart>
import 'package:flutter/material.dart'; import 'package:google_fonts/google_fonts.dart'; /// Enhanced Flutter theme with improved light and dark modes /// Features better color cohesion, refined component styles, and additional theme elements // --- Core Color Palettes --- class AppColors { // Light Theme static const primaryLight = Color(0xFFC76723); // Amazon Orange static const secondaryLight = Color(0xFF232F3E); // Amazon Dark Blue static const accentLight = Color(0xFF037EC0); // Complementary Blue static const errorLight = Color(0xFFD32F2F); // Error Red static const successLight = Color(0xFF388E3C); // Success Green static const warningLight = Color(0xFFFFA000); // Warning Amber static const infoLight = Color(0xFF1976D2); // Info Blue // Backgrounds & Surfaces (Light) static const scaffoldLight = Color( 0xFFFAFAFA, ); // Off-white for less eye strain static const cardLight = Colors.white; static const textFieldLight = Color(0xFFF5F5F5); static const dividerLight = Color(0xFFE0E0E0); // Text Colors (Light) static const textPrimaryLight = Color(0xFF212121); static const textSecondaryLight = Color(0xFF757575); static const textTertiaryLight = Color(0xFF9E9E9E); static const onPrimaryLight = Colors.white; // Dark Theme static const primaryDark = Color(0xFFFFAB40); // Lighter Orange for dark theme static const secondaryDark = Color(0xFF1A2433); // Deeper blue for dark mode static const accentDark = Color(0xFF4FC3F7); // Light Blue accent static const errorDark = Color(0xFFEF5350); // Brighter Error static const successDark = Color(0xFF66BB6A); // Brighter Success static const warningDark = Color(0xFFFFD54F); // Brighter Warning static const infoDark = Color(0xFF42A5F5); // Brighter Info // Backgrounds & Surfaces (Dark) static const scaffoldDark = Color(0xFF121212); // Material dark background static const cardDark = Color(0xFF1D1D1D); // Slightly lighter than scaffold static const textFieldDark = Color( 0xFF2C2C2C, ); // Lighter input fields for contrast static const dividerDark = Color(0xFF424242); // Dark dividers // Text Colors (Dark) static const textPrimaryDark = Color( 0xFFECECEC, ); // Not pure white for less eye strain static const textSecondaryDark = Color(0xFFB0B0B0); static const textTertiaryDark = Color(0xFF787878); static const onPrimaryDark = Color(0xFF121212); // Dark text on light buttons static const lowerLoginText = Color(0xFF121212); } // Common spacing & dimensions class AppDimensions { static const double xs = 4.0; static const double sm = 8.0; static const double md = 16.0; static const double lg = 24.0; static const double xl = 32.0; static const double buttonHeight = 52.0; static const double buttonRadius = 8.0; static const double cardRadius = 12.0; static const double textFieldRadius = 8.0; } class AppTheme { static TextTheme _buildTextTheme( TextTheme base, Color primaryTextColor, Color secondaryTextColor, ) { return base.copyWith( displayLarge: GoogleFonts.roboto( fontSize: 28, fontWeight: FontWeight.bold, letterSpacing: -0.5, color: primaryTextColor, ), displayMedium: GoogleFonts.roboto( fontSize: 24, fontWeight: FontWeight.w700, letterSpacing: -0.25, color: primaryTextColor, ), displaySmall: GoogleFonts.roboto( fontSize: 20, fontWeight: FontWeight.w700, color: primaryTextColor, ), headlineMedium: GoogleFonts.roboto( fontSize: 18, fontWeight: FontWeight.w600, color: primaryTextColor, ), headlineSmall: GoogleFonts.roboto( fontSize: 16, fontWeight: FontWeight.w600, color: primaryTextColor, ), titleLarge: GoogleFonts.roboto( fontSize: 16, fontWeight: FontWeight.w600, color: primaryTextColor, ), titleMedium: GoogleFonts.roboto( fontSize: 14, fontWeight: FontWeight.w500, color: primaryTextColor, ), titleSmall: GoogleFonts.roboto( fontSize: 13, fontWeight: FontWeight.w500, color: secondaryTextColor, ), bodyLarge: GoogleFonts.roboto(fontSize: 16, color: primaryTextColor), bodyMedium: GoogleFonts.roboto(fontSize: 14, color: primaryTextColor), bodySmall: GoogleFonts.roboto(fontSize: 12, color: secondaryTextColor), labelLarge: GoogleFonts.roboto(fontSize: 14, fontWeight: FontWeight.w600), ); } // Shared button style builder static ButtonStyle _buildButtonStyle({ required Color backgroundColor, required Color foregroundColor, Color? borderColor, double height = 40.0, double? minimumWidth, }) { return ButtonStyle( backgroundColor: WidgetStateProperty.resolveWith<Color>((states) { if (states.contains(WidgetState.disabled)) { return backgroundColor.withOpacity(0.3); } if (states.contains(WidgetState.pressed)) { return backgroundColor.withOpacity(0.8); } return backgroundColor; }), foregroundColor: WidgetStateProperty.resolveWith<Color>((states) { if (states.contains(WidgetState.disabled)) { return foregroundColor.withOpacity(0.5); } return foregroundColor; }), overlayColor: WidgetStateProperty.resolveWith<Color>((states) { return foregroundColor.withOpacity(0.1); }), shape: WidgetStateProperty.all<RoundedRectangleBorder>( RoundedRectangleBorder( borderRadius: BorderRadius.circular(AppDimensions.buttonRadius), side: borderColor != null ? BorderSide(color: borderColor, width: 1.5) : BorderSide.none, ), ), minimumSize: WidgetStateProperty.all<Size>( Size(minimumWidth ?? 0, height), ), padding: WidgetStateProperty.all<EdgeInsets>( const EdgeInsets.symmetric(horizontal: AppDimensions.lg), ), elevation: WidgetStateProperty.resolveWith<double>((states) { if (states.contains(WidgetState.disabled)) return 0; if (states.contains(WidgetState.pressed)) return 1; return 2; }), ); } static ThemeData get lightTheme { final base = ThemeData.light(); final textTheme = _buildTextTheme( base.textTheme, AppColors.textPrimaryLight, AppColors.textSecondaryLight, ); return ThemeData( brightness: Brightness.light, primaryColor: AppColors.primaryLight, primaryColorDark: AppColors.primaryLight.withOpacity(0.8), primaryColorLight: AppColors.primaryLight.withOpacity(0.4), canvasColor: AppColors.scaffoldLight, scaffoldBackgroundColor: AppColors.scaffoldLight, cardColor: AppColors.cardLight, dividerColor: AppColors.dividerLight, focusColor: AppColors.primaryLight.withOpacity(0.12), hoverColor: AppColors.primaryLight.withOpacity(0.06), splashColor: AppColors.primaryLight.withOpacity(0.15), fontFamily: GoogleFonts.roboto().fontFamily, // AppBar appBarTheme: AppBarTheme( backgroundColor: AppColors.primaryLight, elevation: 0, centerTitle: false, iconTheme: const IconThemeData(color: AppColors.onPrimaryLight), titleTextStyle: GoogleFonts.roboto( fontSize: 18, fontWeight: FontWeight.w600, color: AppColors.onPrimaryLight, ), toolbarHeight: 56, shadowColor: AppColors.secondaryLight.withOpacity(0.15), ), // Buttons elevatedButtonTheme: ElevatedButtonThemeData( style: _buildButtonStyle( backgroundColor: AppColors.primaryLight, foregroundColor: AppColors.onPrimaryLight, //borderColor: AppColors.primaryLight, ), ), outlinedButtonTheme: OutlinedButtonThemeData( style: _buildButtonStyle( backgroundColor: Colors.transparent, foregroundColor: AppColors.primaryLight, //borderColor: AppColors.primaryLight, ), ), textButtonTheme: TextButtonThemeData( style: ButtonStyle( foregroundColor: WidgetStateProperty.all<Color>( AppColors.primaryLight, ), textStyle: WidgetStateProperty.all<TextStyle>( GoogleFonts.roboto(fontWeight: FontWeight.w600), ), shape: WidgetStateProperty.all<RoundedRectangleBorder>( RoundedRectangleBorder( borderRadius: BorderRadius.circular(AppDimensions.sm), ), ), overlayColor: WidgetStateProperty.all<Color>( AppColors.primaryLight.withOpacity(0.1), ), ), ), // Card cardTheme: CardTheme( color: AppColors.cardLight, elevation: 2, shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(AppDimensions.cardRadius), ), shadowColor: AppColors.secondaryLight.withOpacity(0.1), ), // Inputs inputDecorationTheme: InputDecorationTheme( filled: true, fillColor: AppColors.textFieldLight, contentPadding: const EdgeInsets.symmetric( horizontal: AppDimensions.md, vertical: AppDimensions.md, ), hintStyle: GoogleFonts.roboto( color: AppColors.textTertiaryLight, fontSize: 14, ), labelStyle: GoogleFonts.roboto( color: AppColors.textSecondaryLight, fontSize: 14, ), border: OutlineInputBorder( borderRadius: BorderRadius.circular(AppDimensions.textFieldRadius), borderSide: BorderSide.none, ), enabledBorder: OutlineInputBorder( borderRadius: BorderRadius.circular(AppDimensions.textFieldRadius), borderSide: BorderSide.none, ), focusedBorder: OutlineInputBorder( borderRadius: BorderRadius.circular(AppDimensions.textFieldRadius), borderSide: const BorderSide( color: AppColors.primaryLight, width: 1.5, ), ), errorBorder: OutlineInputBorder( borderRadius: BorderRadius.circular(AppDimensions.textFieldRadius), borderSide: const BorderSide(color: AppColors.errorLight, width: 1.5), ), focusedErrorBorder: OutlineInputBorder( borderRadius: BorderRadius.circular(AppDimensions.textFieldRadius), borderSide: const BorderSide(color: AppColors.errorLight, width: 1.5), ), prefixIconColor: AppColors.textSecondaryLight, suffixIconColor: AppColors.textSecondaryLight, ), // Checkbox & Toggle checkboxTheme: CheckboxThemeData( fillColor: WidgetStateProperty.resolveWith<Color>((states) { if (states.contains(WidgetState.disabled)) { return AppColors.textTertiaryLight; } if (states.contains(WidgetState.selected)) { return AppColors.primaryLight; } return Colors.transparent; }), side: const BorderSide(width: 1.5, color: AppColors.textSecondaryLight), shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(3)), ), switchTheme: SwitchThemeData( thumbColor: WidgetStateProperty.resolveWith<Color>((states) { if (states.contains(WidgetState.disabled)) { return AppColors.textTertiaryLight; } if (states.contains(WidgetState.selected)) { return AppColors.primaryLight; } return Colors.white; }), trackColor: WidgetStateProperty.resolveWith<Color>((states) { if (states.contains(WidgetState.disabled)) { return AppColors.dividerLight; } if (states.contains(WidgetState.selected)) { return AppColors.primaryLight.withOpacity(0.4); } return AppColors.textTertiaryLight; }), ), // Chip chipTheme: ChipThemeData( backgroundColor: AppColors.primaryLight.withOpacity(0.08), disabledColor: AppColors.dividerLight, selectedColor: AppColors.primaryLight.withOpacity(0.2), labelStyle: GoogleFonts.roboto( fontSize: 12, color: AppColors.textPrimaryLight, ), secondaryLabelStyle: GoogleFonts.roboto( fontSize: 12, color: AppColors.primaryLight, fontWeight: FontWeight.w500, ), padding: const EdgeInsets.symmetric( horizontal: AppDimensions.md, vertical: AppDimensions.xs, ), shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(AppDimensions.sm), ), ), // Dialogs & Bottom Sheets dialogTheme: DialogTheme( backgroundColor: AppColors.cardLight, elevation: 3, shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(AppDimensions.lg), ), ), bottomSheetTheme: const BottomSheetThemeData( backgroundColor: AppColors.cardLight, elevation: 8, shape: RoundedRectangleBorder( borderRadius: BorderRadius.only( topLeft: Radius.circular(AppDimensions.xl), topRight: Radius.circular(AppDimensions.xl), ), ), ), // Progress Indicators progressIndicatorTheme: const ProgressIndicatorThemeData( color: AppColors.primaryLight, linearTrackColor: AppColors.dividerLight, refreshBackgroundColor: AppColors.dividerLight, ), // Color Scheme colorScheme: ColorScheme.light( primary: AppColors.primaryLight, primaryContainer: AppColors.primaryLight.withOpacity(0.15), onPrimaryContainer: AppColors.primaryLight.withOpacity(0.8), secondary: AppColors.secondaryLight, secondaryContainer: AppColors.secondaryLight.withOpacity(0.1), onSecondaryContainer: AppColors.secondaryLight, tertiary: AppColors.accentLight, tertiaryContainer: AppColors.accentLight.withOpacity(0.1), onTertiaryContainer: AppColors.accentLight, error: AppColors.errorLight, errorContainer: AppColors.errorLight.withOpacity(0.1), onErrorContainer: AppColors.errorLight, surface: AppColors.cardLight, onSurface: AppColors.textPrimaryLight, onPrimary: AppColors.onPrimaryLight, onSecondary: Colors.white, onError: Colors.white, ), textTheme: textTheme, ); } static ThemeData get darkTheme { final base = ThemeData.dark(); final textTheme = _buildTextTheme( base.textTheme, AppColors.textPrimaryDark, AppColors.textSecondaryDark, ); return ThemeData( brightness: Brightness.dark, primaryColor: AppColors.primaryDark, primaryColorDark: AppColors.primaryDark.withOpacity(0.8), primaryColorLight: AppColors.primaryDark.withOpacity(0.4), canvasColor: AppColors.scaffoldDark, scaffoldBackgroundColor: AppColors.scaffoldDark, cardColor: AppColors.cardDark, dividerColor: AppColors.dividerDark, focusColor: AppColors.primaryDark.withOpacity(0.12), hoverColor: AppColors.primaryDark.withOpacity(0.06), splashColor: AppColors.primaryDark.withOpacity(0.15), fontFamily: GoogleFonts.roboto().fontFamily, // AppBar appBarTheme: AppBarTheme( backgroundColor: AppColors.secondaryDark, elevation: 0, centerTitle: false, iconTheme: const IconThemeData(color: AppColors.textPrimaryDark), titleTextStyle: GoogleFonts.roboto( fontSize: 18, fontWeight: FontWeight.w600, color: AppColors.textPrimaryDark, ), toolbarHeight: 56, shadowColor: Colors.black.withOpacity(0.2), ), // Buttons elevatedButtonTheme: ElevatedButtonThemeData( style: _buildButtonStyle( backgroundColor: AppColors.primaryDark, height: AppDimensions.buttonHeight, foregroundColor: AppColors.onPrimaryDark, ), ), outlinedButtonTheme: OutlinedButtonThemeData( style: _buildButtonStyle( backgroundColor: Colors.transparent, foregroundColor: AppColors.primaryDark, //borderColor: AppColors.primaryDark, ), ), textButtonTheme: TextButtonThemeData( style: ButtonStyle( foregroundColor: WidgetStateProperty.all<Color>( AppColors.primaryDark, ), textStyle: WidgetStateProperty.all<TextStyle>( GoogleFonts.roboto(fontWeight: FontWeight.w600), ), shape: WidgetStateProperty.all<RoundedRectangleBorder>( RoundedRectangleBorder( borderRadius: BorderRadius.circular(AppDimensions.sm), ), ), overlayColor: WidgetStateProperty.all<Color>( AppColors.primaryDark.withOpacity(0.15), ), ), ), // Card cardTheme: CardTheme( color: AppColors.cardDark, elevation: 2, shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(AppDimensions.cardRadius), ), shadowColor: Colors.black.withOpacity(0.3), ), // Inputs inputDecorationTheme: InputDecorationTheme( filled: true, fillColor: AppColors.textFieldDark, contentPadding: const EdgeInsets.symmetric( horizontal: AppDimensions.md, vertical: AppDimensions.md, ), hintStyle: GoogleFonts.roboto( color: AppColors.textTertiaryDark, fontSize: 14, ), labelStyle: GoogleFonts.roboto( color: AppColors.textSecondaryDark, fontSize: 14, ), border: OutlineInputBorder( borderRadius: BorderRadius.circular(AppDimensions.textFieldRadius), borderSide: BorderSide.none, ), enabledBorder: OutlineInputBorder( borderRadius: BorderRadius.circular(AppDimensions.textFieldRadius), borderSide: BorderSide.none, ), focusedBorder: OutlineInputBorder( borderRadius: BorderRadius.circular(AppDimensions.textFieldRadius), borderSide: const BorderSide( color: AppColors.primaryDark, width: 1.5, ), ), errorBorder: OutlineInputBorder( borderRadius: BorderRadius.circular(AppDimensions.textFieldRadius), borderSide: const BorderSide(color: AppColors.errorDark, width: 1.5), ), focusedErrorBorder: OutlineInputBorder( borderRadius: BorderRadius.circular(AppDimensions.textFieldRadius), borderSide: const BorderSide(color: AppColors.errorDark, width: 1.5), ), prefixIconColor: AppColors.textSecondaryDark, suffixIconColor: AppColors.textSecondaryDark, ), // Checkbox & Toggle checkboxTheme: CheckboxThemeData( fillColor: WidgetStateProperty.resolveWith<Color>((states) { if (states.contains(WidgetState.disabled)) { return AppColors.textTertiaryDark; } if (states.contains(WidgetState.selected)) { return AppColors.primaryDark; } return Colors.transparent; }), side: const BorderSide(width: 1.5, color: AppColors.textSecondaryDark), shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(3)), ), switchTheme: SwitchThemeData( thumbColor: WidgetStateProperty.resolveWith<Color>((states) { if (states.contains(WidgetState.disabled)) { return AppColors.textTertiaryDark; } if (states.contains(WidgetState.selected)) { return AppColors.primaryDark; } return Colors.white; }), trackColor: WidgetStateProperty.resolveWith<Color>((states) { if (states.contains(WidgetState.disabled)) { return AppColors.dividerDark; } if (states.contains(WidgetState.selected)) { return AppColors.primaryDark.withOpacity(0.4); } return AppColors.textTertiaryDark; }), ), // Chip chipTheme: ChipThemeData( backgroundColor: AppColors.primaryDark.withOpacity(0.12), disabledColor: AppColors.dividerDark, selectedColor: AppColors.primaryDark.withOpacity(0.25), labelStyle: GoogleFonts.roboto( fontSize: 12, color: AppColors.textPrimaryDark, ), secondaryLabelStyle: GoogleFonts.roboto( fontSize: 12, color: AppColors.primaryDark, fontWeight: FontWeight.w500, ), padding: const EdgeInsets.symmetric( horizontal: AppDimensions.md, vertical: AppDimensions.xs, ), shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(AppDimensions.sm), ), ), // Dialogs & Bottom Sheets dialogTheme: DialogTheme( backgroundColor: AppColors.cardDark, elevation: 3, shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(AppDimensions.lg), ), ), bottomSheetTheme: const BottomSheetThemeData( backgroundColor: AppColors.cardDark, elevation: 8, shape: RoundedRectangleBorder( borderRadius: BorderRadius.only( topLeft: Radius.circular(AppDimensions.xl), topRight: Radius.circular(AppDimensions.xl), ), ), ), // Progress Indicators progressIndicatorTheme: const ProgressIndicatorThemeData( color: AppColors.primaryDark, linearTrackColor: AppColors.dividerDark, refreshBackgroundColor: AppColors.dividerDark, ), // Color Scheme colorScheme: ColorScheme.dark( primary: AppColors.primaryDark, primaryContainer: AppColors.primaryDark.withOpacity(0.15), onPrimaryContainer: AppColors.primaryDark, secondary: AppColors.secondaryDark, secondaryContainer: AppColors.secondaryDark.withOpacity(0.1), onSecondaryContainer: AppColors.textPrimaryDark, tertiary: AppColors.accentDark, tertiaryContainer: AppColors.accentDark.withOpacity(0.1), onTertiaryContainer: AppColors.accentDark, error: AppColors.errorDark, errorContainer: AppColors.errorDark.withOpacity(0.1), onErrorContainer: AppColors.errorDark, surface: AppColors.cardDark, onSurface: AppColors.textPrimaryDark, onPrimary: AppColors.onPrimaryDark, onSecondary: AppColors.textPrimaryDark, onError: Colors.black, ), textTheme: textTheme, ); } }
<end of core/theme/app_theme.dart>

<start of core/utils/app_assets.dart>
class AppAssets { static const String logo = 'images/logo.png'; static const String logo1 = 'images/logo1.png'; static const String adCylinders = 'images/cylinder_ad.png'; static const String adPlaceholder1 = 'images/ad1.png'; // Generic placeholder static const String adPlaceholder2 = 'images/ad2.png'; // Generic placeholder }
<end of core/utils/app_assets.dart>

<start of core/utils/app_constants.dart>
class AppConstants { static const String appName = 'Amazons Net'; static const String slogan = 'Fast. Reliable. Affordable.'; static const String companyFullName = 'Lence Amazons LTD.'; static const String copyrightYear = '© 2025'; // As per screenshot static const String customerService1 = '0702026544'; static const String customerService2 = '0790882866'; // From login screen static const String customerServiceCylinderAd = '0702026544 / 0715080432'; static const String whatsappGroupLink = 'https://chat.whatsapp.com/YOUR_GROUP_INVITE_LINK'; // Replace with actual link // Add other platform links if needed }
<end of core/utils/app_constants.dart>

<start of core/widgets/app_logo.dart>
import 'package:flutter/material.dart'; import 'package:net_app/core/utils/app_assets.dart'; class AppLogo extends StatelessWidget { final double? height; final double? width; const AppLogo({super.key, this.height, this.width}); @override Widget build(BuildContext context) { return Image.asset( AppAssets.logo, height: height ?? 60, // Default height width: width, // Consider BoxFit.contain if your logo aspect ratio needs it ); } }
<end of core/widgets/app_logo.dart>

<start of core/widgets/primary_button.dart>
import 'package:flutter/material.dart'; import 'package:net_app/core/theme/app_theme.dart'; class PrimaryButton extends StatelessWidget { final String text; final VoidCallback? onPressed; final bool isLoading; final Color? backgroundColor; final Color? textColor; const PrimaryButton({ super.key, required this.text, this.onPressed, this.isLoading = false, this.backgroundColor, this.textColor, }); @override Widget build(BuildContext context) { final theme = Theme.of(context); return ElevatedButton( style: (theme.elevatedButtonTheme.style ?? const ElevatedButtonThemeData().style) ?.copyWith( backgroundColor: WidgetStateProperty.resolveWith<Color?>(( Set<WidgetState> states, ) { if (backgroundColor != null) return backgroundColor; if (states.contains(WidgetState.disabled)) { return theme.colorScheme.primary.withOpacity(0.3); } return theme.colorScheme.primary; }), foregroundColor: WidgetStateProperty.all<Color?>( textColor ?? (theme.brightness == Brightness.light ? AppColors.onPrimaryLight : AppColors.onPrimaryDark), ), minimumSize: WidgetStateProperty.all<Size>( const Size(double.infinity, AppDimensions.buttonHeight), ), ), onPressed: isLoading ? null : onPressed, child: isLoading ? SizedBox( height: 24, width: 24, child: CircularProgressIndicator( strokeWidth: 2.5, valueColor: AlwaysStoppedAnimation<Color>( textColor ?? (theme.brightness == Brightness.light ? AppColors.onPrimaryLight : AppColors.onPrimaryDark), ), ), ) : Text( text, style: theme.textTheme.labelLarge?.copyWith( color: textColor ?? (theme.brightness == Brightness.light ? AppColors.onPrimaryLight : AppColors.onPrimaryDark), ), ), ); } }
<end of core/widgets/primary_button.dart>

<start of data/datasources/mock_data_sources.dart>
import 'package:fl_chart/fl_chart.dart'; // Added for FlSpot import 'package:flutter/material.dart'; // Added for Color import 'package:net_app/data/models/package_model.dart'; import 'package:net_app/core/utils/app_assets.dart'; import 'package:net_app/data/models/notification_model.dart'; import 'dart:math'; // For random data generation class MockDataSource { List<PackageModel> _internalPackages = []; final Random _random = Random(); MockDataSource() { _initializePackages(); } void _initializePackages() { _internalPackages = [ PackageModel( id: '1', name: '30Minutes UnlimiNET', price: 'Sh5', validity: '', devices: '1 Device', isUnlimiNET: true, numericPrice: 5, isFavorite: true ), PackageModel( id: '2', name: '1Hour UnlimiNET', price: 'Sh9', validity: '', devices: '1 Device', isUnlimiNET: true, numericPrice: 9, isFavorite: false ), PackageModel( id: '3', name: '2Hours UnlimiNET', price: 'Sh13', validity: '', devices: '1 Device', isUnlimiNET: true, numericPrice: 13, isFavorite: false ), PackageModel( id: '4', name: '4Hours UnlimiNET', price: 'Sh20', validity: '', devices: '1 Device', isUnlimiNET: true, numericPrice: 20, isFavorite: false ), PackageModel( id: '5', name: '1GB + 500MB bonus', price: 'Sh29', validity: 'valid for 24Hours', devices: '1 Device', numericPrice: 29, isFavorite: false ), PackageModel( id: '6', name: '10Hours UnlimiNET', price: 'Sh30', validity: '', devices: '1 Device', isUnlimiNET: true, numericPrice: 30, isFavorite: false ), PackageModel( id: '7', name: '2GB + 1GB bonus', price: 'Sh39', validity: 'valid for 24Hours', devices: '1 Device', numericPrice: 39, isFavorite: true ), PackageModel( id: '8', name: 'UnlimiNET till midnight', price: 'Sh40', validity: '', devices: '1 Device', isUnlimiNET: true, numericPrice: 40, isFavorite: false ), PackageModel( id: '9', name: '10Hours UnlimiNET', price: 'Sh49', validity: '', devices: '2 Devices', isUnlimiNET: true, numericPrice: 49, isFavorite: false ), PackageModel( id: '10', name: '24Hours UnlimiNET', price: 'Sh50', validity: '', devices: '1 Device', isUnlimiNET: true, numericPrice: 50, isFavorite: true ), PackageModel( id: '11', name: '4GB + 500MB bonus', price: 'Sh59', validity: 'valid for 48Hours', devices: '1 Device', numericPrice: 59, isFavorite: false ), PackageModel( id: '12', name: '5GB + 500MB bonus', price: 'Sh69', validity: 'valid for 72Hours', devices: '1 Device', numericPrice: 69, isFavorite: false ), PackageModel( id: '13', name: '24Hours UnlimiNET', price: 'Sh79', validity: '', devices: '2 Devices', isUnlimiNET: true, numericPrice: 79, isFavorite: false ), PackageModel( id: '14', name: '24Hours UnlimiNET', price: 'Sh99', validity: '', devices: '3 Devices', isUnlimiNET: true, numericPrice: 99, isFavorite: false ), PackageModel( id: '15', name: '3Days UnlimiNET', price: 'Sh125', validity: '', devices: '1 Device', isUnlimiNET: true, numericPrice: 125, isFavorite: true ), PackageModel( id: '16', name: '72Hours UnlimiNET', price: 'Sh249', validity: '', devices: '3 Devices', isUnlimiNET: true, numericPrice: 249, isFavorite: false ), PackageModel( id: '17', name: '7Days UnlimiNET', price: 'Sh250', validity: '', devices: '1 Device', isUnlimiNET: true, numericPrice: 250, isFavorite: false ), PackageModel( id: '18', name: '30Days UnlimiNET', price: 'Sh850', validity: '', devices: '1 Device', isUnlimiNET: true, numericPrice: 850, isFavorite: true ), ]; } List<PackageModel> getPackages() { List<PackageModel> sortedPackages = List.from(_internalPackages); sortedPackages.sort((a, b) { if (a.isFavorite && !b.isFavorite) return -1; if (!a.isFavorite && b.isFavorite) return 1; return a.numericPrice.compareTo(b.numericPrice); }); return sortedPackages; } void toggleFavoriteStatus(String packageId) { final index = _internalPackages.indexWhere((p) => p.id == packageId); if (index != -1) { _internalPackages[index].isFavorite = !_internalPackages[index].isFavorite; } } List<String> getAdImages() { return [ AppAssets.adCylinders, AppAssets.adPlaceholder1, AppAssets.adPlaceholder2, ]; } String mockUserName = "Thereza"; String mockUserPhoneNumber = "0794606921"; String mockActiveSubscription = "KKWZBZVZ • Sh850= 30Days UnlimiNET"; String mockDataUsed = "3.96 GB"; String mockExpiryDate = "14/06/2025 17:55"; List<NotificationModel> getNotifications() { return [ NotificationModel( id: '1', title: 'New Package Alert!', message: 'Check out our new weekly UnlimiNET package for only Sh250.', timestamp: DateTime.now().subtract(const Duration(hours: 2)), isRead: false, ), NotificationModel( id: '2', title: 'Payment Successful', message: 'Your payment of Sh50 for 24Hours UnlimiNET was successful.', timestamp: DateTime.now().subtract(const Duration(days: 1)), isRead: true, ), NotificationModel( id: '3', title: 'Maintenance Scheduled', message: 'Scheduled maintenance tonight from 2 AM to 3 AM. Services might be intermittent.', timestamp: DateTime.now().subtract(const Duration(days: 2, hours: 5)), isRead: false, ), NotificationModel( id: '4', title: 'Free Data Bonus!', message: 'Enjoy a free 500MB bonus on your next purchase of 2GB package.', timestamp: DateTime.now().subtract(const Duration(days: 3)), isRead: true, ), ]; } // Statistics Data List<FlSpot> getWeeklyDataUsage() { // Generate 7 days of data usage (mock) return List.generate(7, (index) { // X-axis: 0 to 6 (representing Mon to Sun, or last 7 days) // Y-axis: Random data usage between 0.5GB and 5GB return FlSpot(index.toDouble(), (_random.nextDouble() * 4.5) + 0.5); }); } Map<String, double> getPackageTypePurchaseStats() { // Count UnlimiNET vs GB-based packages from the mock list int unlimiNETCount = _internalPackages.where((p) => p.isUnlimiNET).length; int gbBasedCount = _internalPackages.where((p) => !p.isUnlimiNET).length; return { 'UnlimiNET': unlimiNETCount.toDouble(), 'GB Bundles': gbBasedCount.toDouble(), }; } List<BarChartGroupData> getMonthlySpending() { // Mock spending for 6 months final List<String> months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun']; return List.generate(months.length, (index) { return BarChartGroupData( x: index, barRods: [ BarChartRodData( toY: (_random.nextInt(1000) + 200).toDouble(), // Spending between 200 and 1200 color: Colors.amber, // Example color width: 16, borderRadius: const BorderRadius.only( topLeft: Radius.circular(4), topRight: Radius.circular(4), ) ), ], ); }); } }
<end of data/datasources/mock_data_sources.dart>

<start of data/models/notification_model.dart>
class NotificationModel { final String id; final String title; final String message; final DateTime timestamp; final bool isRead; NotificationModel({ required this.id, required this.title, required this.message, required this.timestamp, this.isRead = false, }); }
<end of data/models/notification_model.dart>

<start of data/models/package_model.dart>
class PackageModel { final String id; final String name; // e.g., "2GB + 1GB bonus" or "10Hours UnlimiNET" final String price; // e.g., "Sh39" final String validity; // e.g., "valid for 24Hours" or "till midnight" final String devices; // e.g., "1 Device" or "2 Devices" final bool isUnlimiNET; final double numericPrice; bool isFavorite; // Added field PackageModel({ required this.id, required this.name, required this.price, required this.validity, required this.devices, this.isUnlimiNET = false, required this.numericPrice, this.isFavorite = false, // Default to false }); String get fullDescription { if (isUnlimiNET) { return name; } return "$name $validity"; } }
<end of data/models/package_model.dart>

<start of data/models/user_model.dart>
class UserModel { final String name; final String phoneNumber; final double credit; final int netPoints; // Add other fields as needed UserModel({ required this.name, required this.phoneNumber, this.credit = 0.0, this.netPoints = 0, }); }
<end of data/models/user_model.dart>

<start of features/auth/screens/login_screen.dart>
import 'package:flutter/material.dart'; import 'package:net_app/app_router.dart'; import 'package:net_app/core/theme/app_theme.dart'; import 'package:net_app/core/utils/app_constants.dart'; import 'package:net_app/core/widgets/app_logo.dart'; import 'package:net_app/core/widgets/primary_button.dart'; import 'package:net_app/features/auth/widgets/auth_footer.dart'; class LoginScreen extends StatefulWidget { const LoginScreen({super.key}); @override State<LoginScreen> createState() => _LoginScreenState(); } class _LoginScreenState extends State<LoginScreen> { final _formKey = GlobalKey<FormState>(); final _phoneController = TextEditingController(); bool _isLoading = false; Future<void> _connect() async { if (_formKey.currentState!.validate()) { setState(() => _isLoading = true); // Simulate API call await Future.delayed(const Duration(seconds: 2)); setState(() => _isLoading = false); // Mock success ScaffoldMessenger.of(context).showSnackBar( SnackBar( content: Text('Verification code sent to ${_phoneController.text}'), backgroundColor: AppColors.successLight, ), ); Navigator.of( context, ).pushNamed(AppRouter.otpRoute, arguments: _phoneController.text); } } @override void dispose() { _phoneController.dispose(); super.dispose(); } @override Widget build(BuildContext context) { final theme = Theme.of(context); return Scaffold( body: SafeArea( child: Center( child: SingleChildScrollView( padding: const EdgeInsets.all(AppDimensions.lg), child: Form( key: _formKey, child: Column( mainAxisAlignment: MainAxisAlignment.center, crossAxisAlignment: CrossAxisAlignment.stretch, children: [ const AppLogo(height: 80), const SizedBox(height: AppDimensions.sm), Text( AppConstants.slogan, textAlign: TextAlign.center, style: theme.textTheme.titleMedium?.copyWith( color: theme.colorScheme.onSurface.withOpacity(0.7), ), ), const SizedBox(height: AppDimensions.xl * 1.5), Text( "Sign in here", textAlign: TextAlign.center, style: theme.textTheme.headlineMedium, ), const SizedBox(height: AppDimensions.lg), TextFormField( controller: _phoneController, keyboardType: TextInputType.phone, decoration: const InputDecoration( hintText: "Enter your phone number", prefixIcon: Icon(Icons.phone_outlined), ), validator: (value) { if (value == null || value.isEmpty) { return 'Please enter your phone number'; } if (value.length < 10) { // Basic validation return 'Enter a valid phone number'; } return null; }, ), const SizedBox(height: AppDimensions.lg), PrimaryButton( text: "Connect", onPressed: _connect, isLoading: _isLoading, // Use blue color for connect button as per screenshot backgroundColor: AppColors.accentLight, textColor: Colors.white, ), const SizedBox(height: AppDimensions.xl * 1.5), const AuthFooter(), ], ), ), ), ), ), ); } }
<end of features/auth/screens/login_screen.dart>

<start of features/auth/screens/otp_screen.dart>
import 'dart:async'; import 'package:flutter/material.dart'; import 'package:net_app/app_router.dart'; import 'package:net_app/core/theme/app_theme.dart'; import 'package:net_app/core/widgets/app_logo.dart'; import 'package:net_app/core/widgets/primary_button.dart'; import 'package:net_app/features/auth/widgets/auth_footer.dart'; class OtpScreen extends StatefulWidget { final String? phoneNumber; // To display if needed const OtpScreen({super.key, this.phoneNumber}); @override State<OtpScreen> createState() => _OtpScreenState(); } class _OtpScreenState extends State<OtpScreen> { final _formKey = GlobalKey<FormState>(); final _otpController = TextEditingController(); bool _isLoading = false; int _resendTimerSeconds = 60; Timer? _timer; @override void initState() { super.initState(); startResendTimer(); } void startResendTimer() { _resendTimerSeconds = 59; // As per screenshot _timer?.cancel(); _timer = Timer.periodic(const Duration(seconds: 1), (timer) { if (_resendTimerSeconds > 0) { setState(() { _resendTimerSeconds--; }); } else { _timer?.cancel(); } }); } Future<void> _verifyOtp() async { if (_formKey.currentState!.validate()) { setState(() => _isLoading = true); // Simulate API call await Future.delayed(const Duration(seconds: 2)); setState(() => _isLoading = false); // Mock success ScaffoldMessenger.of(context).showSnackBar( const SnackBar( content: Text('Verification successful!'), backgroundColor: AppColors.successLight, ), ); Navigator.of( context, ).pushNamedAndRemoveUntil(AppRouter.homeRoute, (route) => false); } } void _resendCode() { if (_resendTimerSeconds == 0) { ScaffoldMessenger.of(context).showSnackBar( SnackBar( content: Text( 'New code sent to ${widget.phoneNumber ?? 'your number'}', ), backgroundColor: AppColors.infoLight, ), ); startResendTimer(); // Add actual resend logic here } } @override void dispose() { _otpController.dispose(); _timer?.cancel(); super.dispose(); } @override Widget build(BuildContext context) { final theme = Theme.of(context); return Scaffold( body: SafeArea( child: Center( child: SingleChildScrollView( padding: const EdgeInsets.all(AppDimensions.lg), child: Form( key: _formKey, child: Column( mainAxisAlignment: MainAxisAlignment.center, crossAxisAlignment: CrossAxisAlignment.stretch, children: [ const AppLogo(height: 80), const SizedBox(height: AppDimensions.xl * 1.5), Text( "Enter verification code sent via SMS", textAlign: TextAlign.center, style: theme.textTheme.titleLarge, ), if (widget.phoneNumber != null) Padding( padding: const EdgeInsets.only(top: AppDimensions.sm), child: Text( "To ${widget.phoneNumber}", textAlign: TextAlign.center, style: theme.textTheme.bodyMedium, ), ), const SizedBox(height: AppDimensions.lg), TextFormField( controller: _otpController, keyboardType: TextInputType.number, textAlign: TextAlign.center, style: theme.textTheme.headlineMedium, decoration: const InputDecoration( hintText: "------", counterText: "", // Hide counter ), maxLength: 6, // Assuming 6 digit OTP validator: (value) { if (value == null || value.isEmpty) { return 'Please enter the OTP'; } if (value.length < 6) { return 'OTP must be 6 digits'; } return null; }, ), const SizedBox(height: AppDimensions.lg), PrimaryButton( text: "Verify", onPressed: _verifyOtp, isLoading: _isLoading, backgroundColor: AppColors.accentLight, textColor: Colors.white, ), const SizedBox(height: AppDimensions.md), TextButton( onPressed: _resendTimerSeconds == 0 ? _resendCode : null, child: Text( _resendTimerSeconds > 0 ? "Resend code in: 0:${_resendTimerSeconds.toString().padLeft(2, '0')} seconds" : "Resend code", style: TextStyle( color: _resendTimerSeconds == 0 ? theme.colorScheme.primary : theme.textTheme.bodySmall?.color, ), ), ), const SizedBox(height: AppDimensions.xl), const AuthFooter(), ], ), ), ), ), ), ); } }
<end of features/auth/screens/otp_screen.dart>

<start of features/auth/widgets/auth_footer.dart>
import 'package:flutter/material.dart'; import 'package:net_app/core/theme/app_theme.dart'; import 'package:net_app/core/utils/app_constants.dart'; class AuthFooter extends StatelessWidget { const AuthFooter({super.key}); @override Widget build(BuildContext context) { final theme = Theme.of(context); return Column( mainAxisSize: MainAxisSize.min, children: [ Text("Customer Service", style: theme.textTheme.titleMedium), const SizedBox(height: AppDimensions.xs), Text( "${AppConstants.customerService1} | ${AppConstants.customerService2}", style: theme.textTheme.bodyMedium?.copyWith( fontWeight: FontWeight.bold, ), ), const SizedBox(height: AppDimensions.lg), Text( "${AppConstants.copyrightYear} ${AppConstants.companyFullName}. All rights reserved.", style: theme.textTheme.bodySmall?.copyWith( color: AppColors.textTertiaryLight, ), // Using a specific color for footer textAlign: TextAlign.center, ), ], ); } }
<end of features/auth/widgets/auth_footer.dart>

<start of features/home/screens/home_screen.dart>
import 'package:flutter/material.dart'; import 'package:net_app/app_router.dart'; // Added for navigation import 'package:net_app/core/theme/app_theme.dart'; import 'package:net_app/core/utils/app_constants.dart'; import 'package:net_app/core/widgets/app_logo.dart'; // import 'package:net_app/core/widgets/primary_button.dart'; // Not used directly here for voucher import 'package:net_app/data/datasources/mock_data_sources.dart'; import 'package:net_app/data/models/package_model.dart'; import 'package:net_app/features/home/widgets/account_details_card.dart'; import 'package:net_app/features/home/widgets/active_subscription_card.dart'; import 'package:net_app/features/home/widgets/ad_slider.dart'; import 'package:net_app/features/home/widgets/package_list_item.dart'; // import 'package:url_launcher/url_launcher.dart'; // For WhatsApp link, add to pubspec.yaml if you use it class HomeScreen extends StatefulWidget { const HomeScreen({super.key}); @override State<HomeScreen> createState() => _HomeScreenState(); } class _HomeScreenState extends State<HomeScreen> { final MockDataSource _dataSource = MockDataSource(); // Single instance late List<PackageModel> _packages; late List<String> _adImages; final _voucherController = TextEditingController(); bool _isConnectingVoucher = false; @override void initState() { super.initState(); _loadPackages(); // Load and sort packages _adImages = _dataSource.getAdImages(); } void _loadPackages() { // Get packages from data source (which now sorts them) setState(() { _packages = _dataSource.getPackages(); }); } void _toggleFavorite(String packageId) { _dataSource.toggleFavoriteStatus(packageId); _loadPackages(); // Reload and re-sort to reflect the change // Optional: Show a SnackBar final package = _packages.firstWhere((p) => p.id == packageId, orElse: () => _dataSource.getPackages().firstWhere((p) => p.id == packageId)); // Ensure we find the package ScaffoldMessenger.of(context).showSnackBar( SnackBar( content: Text( package.isFavorite ? "'${package.name}' added to favorites." : "'${package.name}' removed from favorites.", ), duration: const Duration(seconds: 2), backgroundColor: package.isFavorite ? AppColors.successLight : AppColors.infoLight, ), ); } void _refreshAccount() { // Simulate fetching new data setState(() { // Potentially re-fetch other user data if needed }); ScaffoldMessenger.of(context).showSnackBar( const SnackBar( content: Text('Account details refreshed!'), backgroundColor: AppColors.infoLight, ), ); } Future<void> _connectWithVoucher() async { // Made async if (_voucherController.text.isNotEmpty) { setState(() { _isConnectingVoucher = true; }); // Simulate API call or processing await Future.delayed(const Duration(seconds: 2)); if (mounted) { // Check if widget is still in the tree ScaffoldMessenger.of(context).showSnackBar( SnackBar( content: Text('Connecting with voucher: ${_voucherController.text} - Success!'), backgroundColor: AppColors.successLight, ), ); _voucherController.clear(); setState(() { _isConnectingVoucher = false; }); } } else { ScaffoldMessenger.of(context).showSnackBar( const SnackBar( content: Text('Please enter a voucher code'), backgroundColor: AppColors.errorLight, ), ); } } @override void dispose() { _voucherController.dispose(); super.dispose(); } @override Widget build(BuildContext context) { final theme = Theme.of(context); return Scaffold( body: CustomScrollView( slivers: [ SliverAppBar( pinned: false, floating: true, automaticallyImplyLeading: false, backgroundColor: theme.scaffoldBackgroundColor, elevation: 0, titleSpacing: AppDimensions.md, title: Row( children: [ const AppLogo(height: 40), const Spacer(), IconButton( icon: Icon( Icons.notifications_none_outlined, color: theme.iconTheme.color, ), tooltip: 'Notifications', onPressed: () { Navigator.of(context).pushNamed(AppRouter.notificationsRoute); }, ), IconButton( icon: Icon( Icons.settings_outlined, color: theme.iconTheme.color, ), tooltip: 'Settings', onPressed: () { Navigator.of(context).pushNamed(AppRouter.settingsRoute); }, ), ], ), ), SliverPadding( padding: const EdgeInsets.symmetric(horizontal: AppDimensions.md), sliver: SliverList( delegate: SliverChildListDelegate([ Text( 'Good Morning, ${_dataSource.mockUserName} 👋', style: theme.textTheme.displaySmall, ), const SizedBox(height: AppDimensions.md), AccountDetailsCard( userName: _dataSource.mockUserName, phoneNumber: _dataSource.mockUserPhoneNumber, credit: 0, netPoints: 0, onRefresh: _refreshAccount, ), if (_adImages.isNotEmpty) AdSliderWidget(adImagePaths: _adImages), const SizedBox(height: AppDimensions.md), ActiveSubscriptionCard( subscriptionName: _dataSource.mockActiveSubscription, dataUsed: _dataSource.mockDataUsed, expiryDate: _dataSource.mockExpiryDate, onReconnect: () { // This callback in ActiveSubscriptionCard handles its own SnackBar }, ), Card( child: Padding( padding: const EdgeInsets.all(AppDimensions.md), child: Row( children: [ Expanded( child: TextField( controller: _voucherController, decoration: const InputDecoration( hintText: 'Enter Voucher Code', contentPadding: EdgeInsets.symmetric( horizontal: AppDimensions.md, vertical: AppDimensions.sm, ), border: OutlineInputBorder(), enabledBorder: OutlineInputBorder( borderSide: BorderSide.none, ), focusedBorder: OutlineInputBorder( borderSide: BorderSide( color: AppColors.primaryLight, width: 1.5 ), ), ), enabled: !_isConnectingVoucher, ), ), const SizedBox(width: AppDimensions.sm), ElevatedButton( onPressed: _isConnectingVoucher ? null : _connectWithVoucher, style: ElevatedButton.styleFrom( foregroundColor: AppColors.onPrimaryLight, backgroundColor: AppColors.accentLight, disabledBackgroundColor: AppColors.accentLight.withOpacity(0.5), padding: const EdgeInsets.symmetric( horizontal: AppDimensions.md, vertical: 14, ), textStyle: theme.textTheme.labelMedium, minimumSize: const Size(100, 48), ), child: _isConnectingVoucher ? const SizedBox( width: 20, height: 20, child: CircularProgressIndicator( strokeWidth: 2.5, valueColor: AlwaysStoppedAnimation<Color>(Colors.white), ), ) : const Text('CONNECT'), ), ], ), ), ), const SizedBox(height: AppDimensions.lg), Container( padding: const EdgeInsets.all(AppDimensions.md), decoration: BoxDecoration( color: theme.cardColor, borderRadius: BorderRadius.circular( AppDimensions.cardRadius, ), border: Border.all( color: theme.colorScheme.primary.withOpacity(0.5), ), ), child: Column( crossAxisAlignment: CrossAxisAlignment.start, children: [ Row( children: [ Text("Offers", style: theme.textTheme.headlineSmall), const SizedBox(width: AppDimensions.sm), Chip( label: Text( "New!", style: theme.textTheme.bodySmall?.copyWith( color: Colors.white, ), ), backgroundColor: AppColors.errorLight, padding: const EdgeInsets.symmetric( horizontal: AppDimensions.xs, vertical: 0, ), labelPadding: const EdgeInsets.symmetric( horizontal: AppDimensions.xs, ), ), ], ), const SizedBox(height: AppDimensions.sm), Text( "Daily FREE 20 Minutes UnlimiNET", style: theme.textTheme.titleMedium?.copyWith( fontWeight: FontWeight.bold, ), ), Text( "FREE (Available from 6AM to 8AM daily)", style: theme.textTheme.bodyMedium, ), ], ), ), const SizedBox(height: AppDimensions.lg), Text( "Available Packages", style: theme.textTheme.headlineSmall, ), const SizedBox(height: AppDimensions.sm), ]), ), ), // Updated Package List _packages.isEmpty ? SliverFillRemaining( child: Center( child: Padding( padding: const EdgeInsets.all(AppDimensions.lg), child: Text( "No packages available at the moment.", style: theme.textTheme.titleMedium, textAlign: TextAlign.center, ), ), ), ) : SliverPadding( padding: const EdgeInsets.symmetric(horizontal: AppDimensions.md), sliver: SliverList( delegate: SliverChildBuilderDelegate( (context, index) { final package = _packages[index]; return PackageListItem( package: package, onToggleFavorite: () => _toggleFavorite(package.id), ); }, childCount: _packages.length, ), ), ), SliverPadding( padding: const EdgeInsets.all(AppDimensions.lg), sliver: SliverList( delegate: SliverChildListDelegate([ const SizedBox(height: AppDimensions.md), Text( "Customer Service", style: theme.textTheme.titleMedium, textAlign: TextAlign.center, ), const SizedBox(height: AppDimensions.xs), Text( AppConstants.customerService1, style: theme.textTheme.bodyLarge?.copyWith( fontWeight: FontWeight.bold, ), textAlign: TextAlign.center, ), const SizedBox(height: AppDimensions.md), Padding( padding: const EdgeInsets.symmetric( horizontal: AppDimensions.xl, ), child: ElevatedButton.icon( icon: const Icon( Icons.chat_bubble_outline, ), label: const Text("Join our WhatsApp Group"), onPressed: () { ScaffoldMessenger.of(context).showSnackBar( const SnackBar( content: Text( 'Opening WhatsApp... (Implement URL Launcher)', ), backgroundColor: AppColors.infoLight, ), ); }, style: ElevatedButton.styleFrom( backgroundColor: const Color( 0xFF25D366, ), foregroundColor: Colors.white, ), ), ), const SizedBox(height: AppDimensions.xl), Text( "Powered by © ${DateTime.now().year} Netic ISP", textAlign: TextAlign.center, style: theme.textTheme.bodySmall, ), const SizedBox( height: AppDimensions.md, ), ]), ), ), ], ), ); } }
<end of features/home/screens/home_screen.dart>

<start of features/home/widgets/account_details_card.dart>
import 'package:flutter/material.dart'; import 'package:net_app/core/theme/app_theme.dart'; import 'package:net_app/data/datasources/mock_data_sources.dart'; // For mock data class AccountDetailsCard extends StatelessWidget { final String userName; final String phoneNumber; final double credit; final int netPoints; final VoidCallback onRefresh; // For the refresh icon const AccountDetailsCard({ super.key, required this.userName, required this.phoneNumber, required this.credit, required this.netPoints, required this.onRefresh, }); @override Widget build(BuildContext context) { final theme = Theme.of(context); final mockData = MockDataSource(); // Access mock data directly for simplicity here return Card( elevation: 2, margin: const EdgeInsets.only(bottom: AppDimensions.md), child: Padding( padding: const EdgeInsets.all(AppDimensions.md), child: Column( crossAxisAlignment: CrossAxisAlignment.start, children: [ Row( mainAxisAlignment: MainAxisAlignment.spaceBetween, children: [ Text( 'Prepaid - $phoneNumber', style: theme.textTheme.titleMedium, ), IconButton( icon: Icon(Icons.refresh, color: theme.colorScheme.primary), onPressed: onRefresh, tooltip: 'Refresh Account', ), ], ), const SizedBox(height: AppDimensions.md), Row( mainAxisAlignment: MainAxisAlignment.spaceAround, children: [ _buildAccountStat( context, 'Credit (Ksh)', credit.toStringAsFixed(0), ), _buildAccountStat(context, 'Net Points', netPoints.toString()), ], ), // If you want to add a graph later, this is where it could go // const SizedBox(height: AppDimensions.md), // Text("Data Usage Graph (Placeholder)", style: theme.textTheme.bodySmall), // Container(height: 50, color: Colors.grey[300]), // Placeholder for graph ], ), ), ); } Widget _buildAccountStat(BuildContext context, String label, String value) { final theme = Theme.of(context); return Column( children: [ Text( value, style: theme.textTheme.headlineSmall?.copyWith( fontWeight: FontWeight.bold, ), ), Text(label, style: theme.textTheme.bodySmall), ], ); } }
<end of features/home/widgets/account_details_card.dart>

<start of features/home/widgets/active_subscription_card.dart>
import 'package:flutter/material.dart'; import 'package:net_app/core/theme/app_theme.dart'; // Removed import for PrimaryButton as we're using ElevatedButton directly class ActiveSubscriptionCard extends StatefulWidget { final String subscriptionName; final String dataUsed; final String expiryDate; final VoidCallback onReconnect; // This callback is triggered when reconnection process starts const ActiveSubscriptionCard({ super.key, required this.subscriptionName, required this.dataUsed, required this.expiryDate, required this.onReconnect, }); @override State<ActiveSubscriptionCard> createState() => _ActiveSubscriptionCardState(); } class _ActiveSubscriptionCardState extends State<ActiveSubscriptionCard> { bool _isReconnecting = false; bool _isConnected = false; // To keep track if already connected Future<void> _handleReconnect() async { if (_isConnected) return; // Do nothing if already connected setState(() { _isReconnecting = true; }); widget.onReconnect(); // Trigger the original callback (e.g., for SnackBar) // Simulate network delay await Future.delayed(const Duration(seconds: 2)); // Check if the widget is still mounted before calling setState if (mounted) { setState(() { _isReconnecting = false; _isConnected = true; }); // Optional: Show a success message specifically for connection ScaffoldMessenger.of(context).showSnackBar( const SnackBar( content: Text('Successfully reconnected!'), backgroundColor: AppColors.successLight, ), ); } } @override Widget build(BuildContext context) { final theme = Theme.of(context); final buttonBackgroundColor = _isConnected ? AppColors.successLight.withOpacity( 0.7, ) // A bit dimmer green when connected : (_isReconnecting ? AppColors.infoLight : AppColors.successLight); final buttonForegroundColor = Colors.white; final buttonText = _isConnected ? 'CONNECTED' : (_isReconnecting ? 'RECONNECTING...' : 'RECONNECT'); return Card( elevation: 2, margin: const EdgeInsets.symmetric(vertical: AppDimensions.md), child: Padding( padding: const EdgeInsets.all(AppDimensions.md), child: Column( crossAxisAlignment: CrossAxisAlignment.start, children: [ Text( "Your active subscriptions", style: theme.textTheme.titleMedium, ), const SizedBox(height: AppDimensions.sm), Row( mainAxisAlignment: MainAxisAlignment.spaceBetween, children: [ Expanded( child: Column( crossAxisAlignment: CrossAxisAlignment.start, children: [ Text( widget.subscriptionName, style: theme.textTheme.bodyLarge?.copyWith( fontWeight: FontWeight.bold, ), ), const SizedBox(height: AppDimensions.xs), Text( 'Used: ${widget.dataUsed}', style: theme.textTheme.bodyMedium, ), Text( 'Expires: ${widget.expiryDate}', style: theme.textTheme.bodyMedium, ), ], ), ), const SizedBox(width: AppDimensions.sm), ElevatedButton( onPressed: (_isReconnecting || _isConnected) ? null : _handleReconnect, style: ElevatedButton.styleFrom( backgroundColor: buttonBackgroundColor, foregroundColor: buttonForegroundColor, disabledBackgroundColor: buttonBackgroundColor.withOpacity( 0.5, ), // For disabled state padding: const EdgeInsets.symmetric( horizontal: AppDimensions.md, vertical: AppDimensions.xs, ), textStyle: theme.textTheme.labelLarge?.copyWith( fontSize: 13, ), ).copyWith( // Ensure the button retains its size during loading minimumSize: WidgetStateProperty.all( const Size(120, 36), ), // Adjust size as needed ), child: _isReconnecting ? SizedBox( width: 18, // Adjust size of progress indicator height: 18, child: CircularProgressIndicator( strokeWidth: 2.0, valueColor: AlwaysStoppedAnimation<Color>( buttonForegroundColor, ), ), ) : Text(buttonText), ), ], ), ], ), ), ); } }
<end of features/home/widgets/active_subscription_card.dart>

<start of features/home/widgets/ad_slider.dart>
import 'package:flutter/material.dart'; import 'package:carousel_slider/carousel_slider.dart'; import 'package:net_app/core/theme/app_theme.dart'; class AdSliderWidget extends StatefulWidget { final List<String> adImagePaths; const AdSliderWidget({super.key, required this.adImagePaths}); @override State<AdSliderWidget> createState() => _AdSliderWidgetState(); } class _AdSliderWidgetState extends State<AdSliderWidget> { int _current = 0; final CarouselSliderController _controller = CarouselSliderController(); @override Widget build(BuildContext context) { if (widget.adImagePaths.isEmpty) { return const SizedBox.shrink(); // Don't show if no ads } final theme = Theme.of(context); // Get theme for potential background return Column( children: [ CarouselSlider( items: widget.adImagePaths.map((item) { return Builder( builder: (BuildContext context) { return Container( width: MediaQuery.of(context).size.width, margin: const EdgeInsets.symmetric(horizontal: 5.0), decoration: BoxDecoration( borderRadius: BorderRadius.circular( AppDimensions.cardRadius, ), // Optional: Add a background color if images with transparency // and BoxFit.contain look odd, or to fill letterbox areas. // color: theme.cardColor.withOpacity(0.5), // Example ), child: ClipRRect( borderRadius: BorderRadius.circular( AppDimensions.cardRadius, ), child: Image.asset( item, fit: BoxFit.contain, // Changed from BoxFit.cover ), ), ); }, ); }).toList(), carouselController: _controller, options: CarouselOptions( autoPlay: true, enlargeCenterPage: true, aspectRatio: 16 / 9, // Changed from 2.0 to a standard 16:9 viewportFraction: 0.9, onPageChanged: (index, reason) { setState(() { _current = index; }); }, ), ), Row( mainAxisAlignment: MainAxisAlignment.center, children: widget.adImagePaths.asMap().entries.map((entry) { return GestureDetector( onTap: () => _controller.animateToPage(entry.key), child: Container( width: 8.0, height: 8.0, margin: const EdgeInsets.symmetric( vertical: 8.0, horizontal: 4.0, ), decoration: BoxDecoration( shape: BoxShape.circle, color: (Theme.of(context).brightness == Brightness.dark ? Colors.white : Theme.of(context).primaryColor) .withOpacity(_current == entry.key ? 0.9 : 0.4), ), ), ); }).toList(), ), ], ); } }
<end of features/home/widgets/ad_slider.dart>

<start of features/home/widgets/package_list_item.dart>
import 'package:flutter/material.dart'; import 'package:net_app/app_router.dart'; import 'package:net_app/core/theme/app_theme.dart'; import 'package:net_app/data/models/package_model.dart'; class PackageListItem extends StatelessWidget { final PackageModel package; final VoidCallback onToggleFavorite; const PackageListItem({ super.key, required this.package, required this.onToggleFavorite, }); @override Widget build(BuildContext context) { final theme = Theme.of(context); final bool isDark = theme.brightness == Brightness.dark; return Container( margin: const EdgeInsets.only(bottom: AppDimensions.sm + 4), // Increased bottom margin decoration: BoxDecoration( color: theme.cardColor, borderRadius: BorderRadius.circular(AppDimensions.cardRadius), border: Border.all( color: package.isFavorite ? theme.colorScheme.primary.withOpacity(0.7) : theme.dividerColor.withOpacity(0.5), width: package.isFavorite ? 1.5 : 1.0, ), boxShadow: [ BoxShadow( color: theme.shadowColor.withOpacity(isDark ? 0.15 : 0.06), blurRadius: 6, offset: const Offset(0, 3), ), ], ), child: Material( color: Colors.transparent, borderRadius: BorderRadius.circular(AppDimensions.cardRadius), child: InkWell( onTap: () { Navigator.of(context).pushNamed(AppRouter.paymentRoute, arguments: package); }, borderRadius: BorderRadius.circular(AppDimensions.cardRadius), splashColor: theme.colorScheme.primary.withOpacity(0.1), highlightColor: theme.colorScheme.primary.withOpacity(0.05), child: Padding( padding: const EdgeInsets.all(AppDimensions.md), child: Row( crossAxisAlignment: CrossAxisAlignment.center, children: [ Expanded( child: Column( crossAxisAlignment: CrossAxisAlignment.start, children: [ Text( '${package.price} = ${package.fullDescription}', style: theme.textTheme.titleMedium?.copyWith( fontWeight: FontWeight.bold, // Updated color logic: color: (package.isUnlimiNET && package.isFavorite) ? theme.colorScheme.primary // Orange only if UnlimiNET AND Favorite : theme.textTheme.titleMedium?.color, // Default otherwise ), ), if (package.validity.isNotEmpty && !package.isUnlimiNET) Padding( padding: const EdgeInsets.only(top: AppDimensions.xs / 2), child: Text(package.validity, style: theme.textTheme.bodySmall), ), Padding( padding: const EdgeInsets.only(top: AppDimensions.xs / 2), child: Text(package.devices, style: theme.textTheme.bodySmall), ), ], ), ), const SizedBox(width: AppDimensions.sm), Column( mainAxisAlignment: MainAxisAlignment.center, crossAxisAlignment: CrossAxisAlignment.end, children: [ IconButton( icon: Icon( package.isFavorite ? Icons.star_rounded : Icons.star_border_rounded, color: package.isFavorite ? Colors.amber.shade600 : theme.iconTheme.color?.withOpacity(0.6), ), iconSize: 26, // Slightly smaller icon for better balance padding: const EdgeInsets.all(AppDimensions.xs), // Add some padding around icon constraints: const BoxConstraints(), tooltip: package.isFavorite ? 'Remove from favorites' : 'Add to favorites', onPressed: onToggleFavorite, ), const SizedBox(height: AppDimensions.xs), OutlinedButton( onPressed: () { Navigator.of(context).pushNamed(AppRouter.paymentRoute, arguments: package); }, style: OutlinedButton.styleFrom( side: BorderSide(color: theme.colorScheme.primary.withOpacity(0.8)), foregroundColor: theme.colorScheme.primary, padding: const EdgeInsets.symmetric( horizontal: AppDimensions.md, vertical: AppDimensions.xs / 1.5, ), shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(AppDimensions.buttonRadius / 1.5), // Slightly less rounded ), textStyle: theme.textTheme.labelMedium?.copyWith(fontWeight: FontWeight.w600), ), child: const Text('BUY'), ), ], ) ], ), ), ), ), ); } }
<end of features/home/widgets/package_list_item.dart>

<start of features/notifications/screens/notifications_screen.dart>
import 'package:flutter/material.dart'; import 'package:intl/intl.dart'; // For date formatting, add to pubspec.yaml import 'package:net_app/core/theme/app_theme.dart'; import 'package:net_app/data/datasources/mock_data_sources.dart'; import 'package:net_app/data/models/notification_model.dart'; class NotificationsScreen extends StatefulWidget { const NotificationsScreen({super.key}); @override State<NotificationsScreen> createState() => _NotificationsScreenState(); } class _NotificationsScreenState extends State<NotificationsScreen> { final MockDataSource _dataSource = MockDataSource(); late List<NotificationModel> _notifications; @override void initState() { super.initState(); _notifications = _dataSource.getNotifications(); // Sort by timestamp, newest first _notifications.sort((a, b) => b.timestamp.compareTo(a.timestamp)); } String _formatTimestamp(DateTime timestamp) { final now = DateTime.now(); final difference = now.difference(timestamp); if (difference.inDays == 0) { return DateFormat.jm().format(timestamp); // e.g., 5:30 PM } else if (difference.inDays == 1 && timestamp.day == now.subtract(const Duration(days: 1)).day) { return 'Yesterday'; } else if (difference.inDays < 7) { return DateFormat.EEEE().format(timestamp); // e.g., Monday } else { return DateFormat.yMd().format(timestamp); // e.g., 12/31/2023 } } @override Widget build(BuildContext context) { final theme = Theme.of(context); return Scaffold( appBar: AppBar(title: const Text('Notifications'), elevation: 1), body: _notifications.isEmpty ? Center( child: Text( 'No notifications yet.', style: theme.textTheme.titleMedium, ), ) : ListView.separated( itemCount: _notifications.length, separatorBuilder: (context, index) => const Divider(height: 0), itemBuilder: (context, index) { final notification = _notifications[index]; return ListTile( leading: CircleAvatar( backgroundColor: notification.isRead ? theme.colorScheme.onSurface.withOpacity(0.1) : theme.colorScheme.primary.withOpacity(0.2), child: Icon( notification.isRead ? Icons.notifications_none_outlined : Icons.notifications_active, color: notification.isRead ? theme.colorScheme.onSurface.withOpacity(0.5) : theme.colorScheme.primary, size: 24, ), ), title: Text( notification.title, style: theme.textTheme.titleMedium?.copyWith( fontWeight: notification.isRead ? FontWeight.normal : FontWeight.bold, ), ), subtitle: Text( notification.message, maxLines: 2, overflow: TextOverflow.ellipsis, style: theme.textTheme.bodyMedium?.copyWith( color: notification.isRead ? AppColors.textSecondaryLight : AppColors.textPrimaryLight, ), ), trailing: Text( _formatTimestamp(notification.timestamp), style: theme.textTheme.bodySmall, ), onTap: () { // Mock marking as read setState(() { // This is a mock, in a real app you'd update the model // and potentially persist this state. // For this example, let's just toggle the visual locally if it were mutable. // Since NotificationModel is immutable, we can't directly change isRead. // A real implementation would replace the item or use a stateful widget for the item. ScaffoldMessenger.of(context).showSnackBar( SnackBar( content: Text( 'Notification "${notification.title}" tapped.', ), ), ); }); }, ); }, ), ); } }
<end of features/notifications/screens/notifications_screen.dart>

<start of features/payment/screens/payment_screen.dart>
import 'package:flutter/material.dart'; import 'package:net_app/core/theme/app_theme.dart'; import 'package:net_app/core/widgets/primary_button.dart'; import 'package:net_app/data/models/package_model.dart'; import 'package:net_app/data/datasources/mock_data_sources.dart'; // For mock phone number class PaymentScreen extends StatefulWidget { final PackageModel package; const PaymentScreen({super.key, required this.package}); @override State<PaymentScreen> createState() => _PaymentScreenState(); } class _PaymentScreenState extends State<PaymentScreen> { final _formKey = GlobalKey<FormState>(); late TextEditingController _mpesaPhoneController; bool _isProcessingPayment = false; final MockDataSource _dataSource = MockDataSource(); @override void initState() { super.initState(); _mpesaPhoneController = TextEditingController( text: _dataSource.mockUserPhoneNumber, ); } Future<void> _processPayment() async { if (_formKey.currentState!.validate()) { setState(() => _isProcessingPayment = true); // Simulate payment processing await Future.delayed(const Duration(seconds: 3)); setState(() => _isProcessingPayment = false); // Mock success ScaffoldMessenger.of(context).showSnackBar( SnackBar( content: Text( 'Payment for ${widget.package.price} successful! Package activated.', ), backgroundColor: AppColors.successLight, duration: const Duration(seconds: 3), ), ); Navigator.of(context).pop(); // Go back to home or previous screen } } @override void dispose() { _mpesaPhoneController.dispose(); super.dispose(); } @override Widget build(BuildContext context) { final theme = Theme.of(context); return Scaffold( appBar: AppBar(title: const Text('Complete Subscription'), elevation: 1), body: SingleChildScrollView( padding: const EdgeInsets.all(AppDimensions.lg), child: Form( key: _formKey, child: Column( crossAxisAlignment: CrossAxisAlignment.start, children: [ Text( "Plan selected: ${widget.package.price} = ${widget.package.fullDescription}", style: theme.textTheme.titleLarge, ), const SizedBox(height: AppDimensions.xs), Text( "You'll pay KES ${widget.package.numericPrice.toStringAsFixed(0)} to complete the subscription", style: theme.textTheme.bodyLarge, ), const SizedBox(height: AppDimensions.xl), Text("M-PESA No.", style: theme.textTheme.titleMedium), const SizedBox(height: AppDimensions.sm), TextFormField( controller: _mpesaPhoneController, keyboardType: TextInputType.phone, decoration: const InputDecoration( hintText: "Enter M-PESA phone number", prefixIcon: Icon(Icons.phone_android), ), validator: (value) { if (value == null || value.isEmpty) { return 'Please enter M-PESA phone number'; } if (value.length < 10) { return 'Enter a valid phone number'; } return null; }, ), const SizedBox(height: AppDimensions.md), PrimaryButton( text: "Pay KES ${widget.package.numericPrice.toStringAsFixed(0)}", onPressed: _processPayment, isLoading: _isProcessingPayment, backgroundColor: AppColors.accentLight, // Blue for pay button textColor: Colors.white, ), const SizedBox(height: AppDimensions.lg), Row( children: [ Expanded(child: Divider(color: theme.dividerColor)), Padding( padding: const EdgeInsets.symmetric( horizontal: AppDimensions.sm, ), child: Text("OR", style: theme.textTheme.bodyMedium), ), Expanded(child: Divider(color: theme.dividerColor)), ], ), const SizedBox(height: AppDimensions.lg), Text( "Use our PAYBILL instructions", style: theme.textTheme.titleLarge, ), const SizedBox(height: AppDimensions.md), _buildPaybillInstruction( context, "1. Go to M-PESA on your phone", ), _buildPaybillInstruction(context, "2. Select Pay Bill option"), _buildPaybillInstruction( context, "3. Enter Business no: 4140961", ), _buildPaybillInstruction( context, "4. Enter Account no: ${_dataSource.mockUserPhoneNumber}", ), // Use user's phone as account _buildPaybillInstruction( context, "5. Enter the Amount: ${widget.package.numericPrice.toStringAsFixed(0)}", ), _buildPaybillInstruction( context, "6. Enter your M-PESA PIN and Send", ), _buildPaybillInstruction( context, "7. Check back and proceed after making payment.", ), const SizedBox(height: AppDimensions.lg), Center( child: TextButton( onPressed: () { // This button would typically refresh or check payment status ScaffoldMessenger.of(context).showSnackBar( const SnackBar( content: Text('Checking payment status... (mock)'), backgroundColor: AppColors.infoLight, ), ); }, child: const Text("I have made the payment"), ), ), ], ), ), ), ); } Widget _buildPaybillInstruction(BuildContext context, String text) { return Padding( padding: const EdgeInsets.only(bottom: AppDimensions.xs), child: Text(text, style: Theme.of(context).textTheme.bodyMedium), ); } }
<end of features/payment/screens/payment_screen.dart>

<start of features/settings/screens/settings_screen.dart>
import 'package:flutter/material.dart'; import 'package:net_app/app_router.dart'; import 'package:net_app/core/theme/app_theme.dart'; import 'package:net_app/core/utils/app_constants.dart'; import 'package:net_app/data/datasources/mock_data_sources.dart'; import 'package:net_app/main.dart'; // To access themeNotifier class SettingsScreen extends StatefulWidget { const SettingsScreen({super.key}); @override State<SettingsScreen> createState() => _SettingsScreenState(); } class _SettingsScreenState extends State<SettingsScreen> { final MockDataSource _dataSource = MockDataSource(); @override Widget build(BuildContext context) { final theme = Theme.of(context); final isDarkMode = MyApp.themeNotifier.value == ThemeMode.dark; return Scaffold( appBar: AppBar( title: const Text('Settings'), elevation: 1, ), body: ListView( children: [ ListTile( leading: const Icon(Icons.account_circle_outlined), title: Text('Account', style: theme.textTheme.titleLarge), ), Padding( padding: const EdgeInsets.symmetric(horizontal: AppDimensions.lg, vertical: AppDimensions.xs), child: Column( crossAxisAlignment: CrossAxisAlignment.start, children: [ Text('Name: ${_dataSource.mockUserName}', style: theme.textTheme.bodyLarge), const SizedBox(height: AppDimensions.xs), Text('Phone: ${_dataSource.mockUserPhoneNumber}', style: theme.textTheme.bodyLarge), ], ), ), const Divider(height: AppDimensions.lg), ListTile( leading: const Icon(Icons.palette_outlined), title: Text('Appearance', style: theme.textTheme.titleLarge), ), SwitchListTile( title: Text('Dark Mode', style: theme.textTheme.bodyLarge), value: isDarkMode, onChanged: (bool value) { MyApp.themeNotifier.value = value ? ThemeMode.dark : ThemeMode.light; }, secondary: Icon( isDarkMode ? Icons.dark_mode_outlined : Icons.light_mode_outlined, color: theme.colorScheme.primary, ), activeColor: theme.colorScheme.primary, ), const Divider(height: AppDimensions.lg), ListTile( leading: const Icon(Icons.bar_chart_outlined), // Changed Icon title: Text('Usage Statistics', style: theme.textTheme.bodyLarge), // Changed Text onTap: () { Navigator.of(context).pushNamed(AppRouter.statisticsRoute); // Navigate to statistics }, ), ListTile( leading: Icon(Icons.info_outline, color: theme.colorScheme.secondary), title: Text('About ${AppConstants.appName}', style: theme.textTheme.bodyLarge), onTap: () { showDialog( context: context, builder: (context) => AlertDialog( title: Text('About ${AppConstants.appName}'), content: Text( '${AppConstants.slogan}\nVersion: 1.0.0 (Mock)\n${AppConstants.copyrightYear} ${AppConstants.companyFullName}'), actions: [ TextButton( child: const Text('OK'), onPressed: () => Navigator.of(context).pop(), ), ], ), ); }, ), ListTile( leading: Icon(Icons.help_outline, color: theme.colorScheme.secondary), title: Text('Help & Support', style: theme.textTheme.bodyLarge), onTap: () { ScaffoldMessenger.of(context).showSnackBar( const SnackBar(content: Text('Navigate to Help & Support page (Not Implemented)')), ); }, ), const Divider(height: AppDimensions.lg), Padding( padding: const EdgeInsets.all(AppDimensions.lg), child: ElevatedButton.icon( icon: const Icon(Icons.logout), label: const Text('Log Out'), style: ElevatedButton.styleFrom( backgroundColor: theme.colorScheme.error, foregroundColor: theme.colorScheme.onError, ), onPressed: () { Navigator.of(context).pushNamedAndRemoveUntil( AppRouter.loginRoute, (Route<dynamic> route) => false, ); }, ), ), ], ), ); } }
<end of features/settings/screens/settings_screen.dart>

<start of features/splash/splash_screen.dart>
import 'dart:async'; import 'package:flutter/material.dart'; import 'package:net_app/app_router.dart'; import 'package:net_app/core/theme/app_theme.dart'; import 'package:net_app/core/utils/app_constants.dart'; import 'package:net_app/core/widgets/app_logo.dart'; class SplashScreen extends StatefulWidget { const SplashScreen({super.key}); @override State<SplashScreen> createState() => _SplashScreenState(); } class _SplashScreenState extends State<SplashScreen> with SingleTickerProviderStateMixin { late AnimationController _animationController; late Animation<double> _fadeAnimation; @override void initState() { super.initState(); _animationController = AnimationController( vsync: this, duration: const Duration(milliseconds: 1500), ); _fadeAnimation = CurvedAnimation( parent: _animationController, curve: Curves.easeInOut, ); _animationController.forward(); Timer(const Duration(seconds: 3), () { Navigator.of(context).pushReplacementNamed(AppRouter.loginRoute); }); } @override void dispose() { _animationController.dispose(); super.dispose(); } @override Widget build(BuildContext context) { return Scaffold( backgroundColor: Theme.of(context).brightness == Brightness.light ? const Color.fromARGB( 255, 255, 255, 255, ) // Orange background for splash : AppColors.secondaryDark, body: Center( child: FadeTransition( opacity: _fadeAnimation, child: Column( mainAxisAlignment: MainAxisAlignment.center, children: [ const AppLogo(height: 100), // Adjust size as needed const SizedBox(height: AppDimensions.lg), Text( AppConstants.appName, style: Theme.of(context).textTheme.displayMedium?.copyWith( color: const Color.fromARGB( 193, 26, 25, 25, ), // Text color on splash ), ), const SizedBox(height: AppDimensions.sm), Text( AppConstants.slogan, style: Theme.of(context).textTheme.titleMedium?.copyWith( color: const Color.fromARGB( 193, 26, 25, 25, ), // Text color on splash ), ), ], ), ), ), ); } }
<end of features/splash/splash_screen.dart>

<start of features/statistics/screens/user_statistics_screen.dart>
import 'package:flutter/material.dart'; import 'package:fl_chart/fl_chart.dart'; import 'package:google_fonts/google_fonts.dart'; import 'package:intl/intl.dart'; import 'package:net_app/core/theme/app_theme.dart'; import 'package:net_app/data/datasources/mock_data_sources.dart'; class UserStatisticsScreen extends StatefulWidget { const UserStatisticsScreen({super.key}); @override State<UserStatisticsScreen> createState() => _UserStatisticsScreenState(); } class _UserStatisticsScreenState extends State<UserStatisticsScreen> { final MockDataSource _dataSource = MockDataSource(); late List<FlSpot> _weeklyUsage; late Map<String, double> _packageStats; late List<BarChartGroupData> _monthlySpending; final List<String> _weekDays = [ 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun', ]; final List<String> _months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun']; @override void initState() { super.initState(); _weeklyUsage = _dataSource.getWeeklyDataUsage(); _packageStats = _dataSource.getPackageTypePurchaseStats(); _monthlySpending = _dataSource.getMonthlySpending(); } Widget _buildSectionTitle(String title, BuildContext context) { return Padding( padding: const EdgeInsets.only( top: AppDimensions.lg, bottom: AppDimensions.md, left: AppDimensions.md, ), child: Text( title, style: Theme.of( context, ).textTheme.headlineSmall?.copyWith(fontWeight: FontWeight.bold), ), ); } @override Widget build(BuildContext context) { final theme = Theme.of(context); final isDarkMode = theme.brightness == Brightness.dark; return Scaffold( appBar: AppBar(title: const Text('Usage Statistics'), elevation: 1), body: SingleChildScrollView( padding: const EdgeInsets.only(bottom: AppDimensions.lg), child: Column( crossAxisAlignment: CrossAxisAlignment.start, children: [ _buildSectionTitle('Weekly Data Usage (GB)', context), SizedBox( height: 250, child: Padding( padding: const EdgeInsets.symmetric( horizontal: AppDimensions.md, vertical: AppDimensions.sm, ), child: LineChart(_buildWeeklyUsageChartData(theme, isDarkMode)), ), ), _buildSectionTitle('Package Purchase Distribution', context), SizedBox( height: 250, child: Padding( padding: const EdgeInsets.symmetric( horizontal: AppDimensions.md, ), child: PieChart(_buildPackageStatsChartData(theme, isDarkMode)), ), ), _buildSectionTitle('Monthly Spending (KES)', context), SizedBox( height: 250, child: Padding( padding: const EdgeInsets.symmetric( horizontal: AppDimensions.md, vertical: AppDimensions.sm, ), child: BarChart( _buildMonthlySpendingChartData(theme, isDarkMode), ), ), ), ], ), ), ); } LineChartData _buildWeeklyUsageChartData(ThemeData theme, bool isDarkMode) { final primaryColor = theme.colorScheme.primary; final onSurfaceColor = theme.colorScheme.onSurface; return LineChartData( gridData: FlGridData( show: true, drawVerticalLine: true, horizontalInterval: 1, verticalInterval: 1, getDrawingHorizontalLine: (value) { return FlLine(color: onSurfaceColor.withOpacity(0.1), strokeWidth: 1); }, getDrawingVerticalLine: (value) { return FlLine(color: onSurfaceColor.withOpacity(0.1), strokeWidth: 1); }, ), titlesData: FlTitlesData( show: true, rightTitles: const AxisTitles( sideTitles: SideTitles(showTitles: false), ), topTitles: const AxisTitles(sideTitles: SideTitles(showTitles: false)), bottomTitles: AxisTitles( sideTitles: SideTitles( showTitles: true, reservedSize: 30, interval: 1, getTitlesWidget: (double value, TitleMeta meta) { final index = value.toInt(); if (index < 0 || index >= _weekDays.length) { return const SizedBox.shrink(); } return SideTitleWidget( space: 8, meta: meta, //axisSide: meta.axisSide, child: Text( _weekDays[index], style: TextStyle( color: onSurfaceColor.withOpacity(0.7), fontSize: 10, ), ), ); }, ), ), leftTitles: AxisTitles( sideTitles: SideTitles( showTitles: true, reservedSize: 40, interval: 1, getTitlesWidget: (double value, TitleMeta meta) { if (value % 1 == 0 && value >= 0) { return SideTitleWidget( //axisSide: meta.axisSide, space: 0, meta: meta, child: Text( value.toInt().toString(), style: TextStyle( color: onSurfaceColor.withOpacity(0.7), fontSize: 10, ), textAlign: TextAlign.left, ), ); } return const SizedBox.shrink(); }, ), ), ), borderData: FlBorderData( show: true, border: Border.all(color: onSurfaceColor.withOpacity(0.2)), ), minX: 0, maxX: 6, minY: 0, maxY: 6, lineBarsData: [ LineChartBarData( spots: _weeklyUsage, isCurved: true, gradient: LinearGradient( colors: [ primaryColor.withOpacity(0.8), primaryColor.withOpacity(0.3), ], ), barWidth: 4, isStrokeCapRound: true, dotData: const FlDotData(show: true), belowBarData: BarAreaData( show: true, gradient: LinearGradient( colors: [ primaryColor.withOpacity(0.3), primaryColor.withOpacity(0.0), ], begin: Alignment.topCenter, end: Alignment.bottomCenter, ), ), ), ], lineTouchData: LineTouchData( touchTooltipData: LineTouchTooltipData( //tooltipBgColor: isDarkMode ? AppColors.cardDark : AppColors.cardLight, getTooltipItems: (List<LineBarSpot> touchedBarSpots) { return touchedBarSpots.map((barSpot) { final flSpot = barSpot; return LineTooltipItem( '${_weekDays[flSpot.x.toInt()]}\n', GoogleFonts.roboto( color: primaryColor, fontWeight: FontWeight.bold, ), children: [ TextSpan( text: '${flSpot.y.toStringAsFixed(1)} GB', style: GoogleFonts.roboto(color: onSurfaceColor), ), ], ); }).toList(); }, ), ), ); } PieChartData _buildPackageStatsChartData(ThemeData theme, bool isDarkMode) { final colors = [ theme.colorScheme.primary, theme.colorScheme.secondary, AppColors.accentLight, Colors.teal, ]; int colorIndex = 0; double totalValue = _packageStats.values.fold(0, (sum, item) => sum + item); return PieChartData( pieTouchData: PieTouchData( touchCallback: (FlTouchEvent event, pieTouchResponse) { // Handle touch events if needed for interactivity }, ), borderData: FlBorderData(show: false), sectionsSpace: 2, centerSpaceRadius: 60, sections: _packageStats.entries.map((entry) { final color = colors[colorIndex % colors.length]; colorIndex++; final percentage = totalValue > 0 ? (entry.value / totalValue * 100) : 0.0; return PieChartSectionData( color: color, value: entry.value, title: '${entry.key}\n(${percentage.toStringAsFixed(0)}%)', radius: 50, titleStyle: GoogleFonts.roboto( fontSize: 11, fontWeight: FontWeight.bold, color: color.computeLuminance() > 0.5 ? AppColors.textPrimaryDark : AppColors.textPrimaryLight, // Better contrast shadows: [const Shadow(color: Colors.black26, blurRadius: 2)], ), titlePositionPercentageOffset: 0.55, ); }).toList(), ); } BarChartData _buildMonthlySpendingChartData( ThemeData theme, bool isDarkMode, ) { final onSurfaceColor = theme.colorScheme.onSurface; return BarChartData( alignment: BarChartAlignment.spaceAround, maxY: 1500, barTouchData: BarTouchData( enabled: true, touchTooltipData: BarTouchTooltipData( //tooltipBgColor: isDarkMode ? AppColors.cardDark : AppColors.cardLight, tooltipPadding: const EdgeInsets.all(AppDimensions.sm), tooltipMargin: AppDimensions.sm, getTooltipItem: (group, groupIndex, rod, rodIndex) { return BarTooltipItem( '${_months[group.x.toInt()]}\n', GoogleFonts.roboto( color: rod.color ?? theme.colorScheme.primary, fontWeight: FontWeight.bold, ), children: <TextSpan>[ TextSpan( text: 'KES ${rod.toY.round()}', style: GoogleFonts.roboto( color: onSurfaceColor, fontWeight: FontWeight.w500, ), ), ], ); }, ), ), titlesData: FlTitlesData( show: true, bottomTitles: AxisTitles( sideTitles: SideTitles( showTitles: true, getTitlesWidget: (double value, TitleMeta meta) { final index = value.toInt(); if (index < 0 || index >= _months.length) { return const SizedBox.shrink(); } return SideTitleWidget( ///axisSide: meta.axisSide, space: AppDimensions.xs, meta: meta, child: Text( _months[index], style: TextStyle( color: onSurfaceColor.withOpacity(0.7), fontSize: 10, fontWeight: FontWeight.bold, ), ), ); }, reservedSize: 28, ), ), leftTitles: AxisTitles( sideTitles: SideTitles( showTitles: true, reservedSize: 40, interval: 300, getTitlesWidget: (double value, TitleMeta meta) { if (value % 300 == 0 && value >= 0) { return SideTitleWidget( //axisSide: meta.axisSide, space: 0, meta: meta, child: Text( NumberFormat.compact().format(value.toInt()), style: TextStyle( color: onSurfaceColor.withOpacity(0.7), fontSize: 10, ), textAlign: TextAlign.left, ), ); } return const SizedBox.shrink(); }, ), ), topTitles: const AxisTitles(sideTitles: SideTitles(showTitles: false)), rightTitles: const AxisTitles( sideTitles: SideTitles(showTitles: false), ), ), borderData: FlBorderData(show: false), barGroups: _monthlySpending .map( (data) => data.copyWith( barRods: data.barRods .map( (rod) => rod.copyWith( color: theme.colorScheme.secondary.withOpacity( 0.8, ), ), ) .toList(), ), ) .toList(), gridData: FlGridData( show: true, drawVerticalLine: false, horizontalInterval: 300, getDrawingHorizontalLine: (value) { return FlLine(color: onSurfaceColor.withOpacity(0.1), strokeWidth: 1); }, ), ); } }
<end of features/statistics/screens/user_statistics_screen.dart>

<start of main.dart>
import 'package:flutter/material.dart'; import 'package:net_app/app_router.dart'; import 'package:net_app/core/theme/app_theme.dart'; // Global ValueNotifier for theme mode // In a larger app, you might use a proper DI/Service Locator or State Management (Provider, Riverpod, etc.) // For this example, a static notifier is simple and effective. final ValueNotifier<ThemeMode> themeNotifier = ValueNotifier(ThemeMode.light); void main() { runApp(const MyApp()); } class MyApp extends StatelessWidget { const MyApp({super.key}); // Static getter for easy access in SettingsScreen static ValueNotifier<ThemeMode> get themeNotifier => _themeNotifier; static final ValueNotifier<ThemeMode> _themeNotifier = ValueNotifier(ThemeMode.light); @override Widget build(BuildContext context) { // Listen to the themeNotifier to rebuild MaterialApp when theme changes return ValueListenableBuilder<ThemeMode>( valueListenable: _themeNotifier, // Use the static notifier builder: (_, ThemeMode currentMode, __) { return MaterialApp( title: 'Lence Amazons', theme: AppTheme.lightTheme, darkTheme: AppTheme.darkTheme, themeMode: currentMode, // Set themeMode from the notifier debugShowCheckedModeBanner: false, onGenerateRoute: AppRouter.generateRoute, initialRoute: AppRouter.splashRoute, ); }, ); } }
<end of main.dart>